// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?  @unique
  displayName String?  @map("display_name")
  photoUrl    String?  @map("photo_url")
  isVerified  Boolean  @default(false) @map("is_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  notices       Notice[]
  comments      Comment[]
  upvotes       Upvote[]
  notifications Notification[]

  following UserFollow[] @relation("UserFollowing")
  followers UserFollow[] @relation("UserFollowers")

  @@map("users")
}

model UserFollow {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], name: "unique_follow")
  @@map("user_follows")
}

model Notice {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  category    Category
  userId      String    @map("user_id")
  latitude    Float
  longitude   Float
  address     String?
  imageUrl    String?   @map("image_url")
  isAnonymous Boolean   @default(false) @map("is_anonymous")
  isResolved  Boolean   @default(false) @map("is_resolved")
  upvotes     Int       @default(0)
  views       Int       @default(0)
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  upvotesList   Upvote[]
  notifications Notification[]

  @@index([category])
  @@index([createdAt])
  @@index([userId])
  @@index([latitude, longitude])
  @@map("notices")
}

model Comment {
  id          String   @id @default(cuid())
  noticeId    String   @map("notice_id")
  userId      String   @map("user_id")
  content     String   @db.Text
  isAnonymous Boolean  @default(false) @map("is_anonymous")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  notice Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([noticeId])
  @@map("comments")
}

model Upvote {
  id        String   @id @default(cuid())
  noticeId  String   @map("notice_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  notice Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId], name: "unique_upvote")
  @@map("upvotes")
}

model Notification {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  title           String
  message         String           @db.Text
  type            NotificationType
  isRead          Boolean          @default(false) @map("is_read")
  relatedNoticeId String?          @map("related_notice_id")
  createdAt       DateTime         @default(now()) @map("created_at")

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedNotice Notice? @relation(fields: [relatedNoticeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@map("notifications")
}

enum Category {
  POWER_WATER
  LOST_FOUND
  LOCAL_EVENT
  HELP_REQUEST
  GENERAL
}

enum NotificationType {
  NEW_NOTICE
  UPVOTE
  COMMENT
  FOLLOW
  MENTION
  EMERGENCY
}
